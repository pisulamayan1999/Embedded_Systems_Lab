#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"

#define MAX_VEHICLES 10  // Maximum number of vehicles in a queue
#define NUM_DIRECTIONS 4 // Number of directions (N, S, E, W)

typedef struct {
    int id;
    int speed; // 1-3 units/time unit
    char direction; // N, S, E, W
} Vehicle; // Define a structure for Vehicle

// Queue handles for each direction
QueueHandle_t northQueue;
QueueHandle_t southQueue;
QueueHandle_t eastQueue;
QueueHandle_t westQueue;

char possibleDirections[] = {'N', 'S', 'E', 'W'}; // Array of possible directions

// Function to create a new vehicle
Vehicle createVehicle(int id) {
    Vehicle newVehicle;
    newVehicle.id = id;
    newVehicle.speed = rand() % 3 + 1; // Random speed between 1 and 3
    newVehicle.direction = possibleDirections[rand() % NUM_DIRECTIONS]; // Random direction
    return newVehicle;
}

// Task to simulate traffic by adding vehicles to queues
void trafficSimulationTask(void *pvParameters) {
    int totalVehicles = 20; // Total number of vehicles to simulate
    int vehicleCount = 0; // Initialize the vehicle count

    while (vehicleCount < totalVehicles) { // Loop until all vehicles are created
        Vehicle vehicle = createVehicle(vehicleCount + 1);
        if (vehicle.direction == 'N') {
            xQueueSend(northQueue, &vehicle, portMAX_DELAY);
        } else if (vehicle.direction == 'S') {
            xQueueSend(southQueue, &vehicle, portMAX_DELAY);
        } else if (vehicle.direction == 'E') {
            xQueueSend(eastQueue, &vehicle, portMAX_DELAY);
        } else if (vehicle.direction == 'W') {
            xQueueSend(westQueue, &vehicle, portMAX_DELAY);
        }
        vehicleCount++;
        vTaskDelay(pdMS_TO_TICKS(500)); // Delay for readability
    }

    vTaskDelete(NULL); // Delete the task when done
}

// Task to manage round-robin traffic control
void trafficControlTask(void *pvParameters) {
    QueueHandle_t queues[NUM_DIRECTIONS] = {northQueue, southQueue, eastQueue, westQueue};
    char *queueNames[NUM_DIRECTIONS] = {"North", "South", "East", "West"};
    
    while (1) { // Infinite loop for continuous traffic control
        for (int i = 0; i < NUM_DIRECTIONS; i++) {
            Vehicle vehicle;
            if (xQueueReceive(queues[i], &vehicle, portMAX_DELAY) == pdTRUE) { // Check if queue is not empty
                printf("Vehicle ID %d from %s queue is crossing the intersection with speed %d\n", vehicle.id, queueNames[i], vehicle.speed);
                vTaskDelay(pdMS_TO_TICKS(1000 / vehicle.speed)); // Simulate crossing time based on speed
            }
        }
    }
}

void app_main() {
    // Seed for random number generation
    srand(time(0));

    // Create queues for each direction
    northQueue = xQueueCreate(MAX_VEHICLES, sizeof(Vehicle));
    southQueue = xQueueCreate(MAX_VEHICLES, sizeof(Vehicle));
    eastQueue = xQueueCreate(MAX_VEHICLES, sizeof(Vehicle));
    westQueue = xQueueCreate(MAX_VEHICLES, sizeof(Vehicle));

    // Create tasks
    xTaskCreate(trafficSimulationTask, "Traffic Simulation", 2048, NULL, 1, NULL);
    xTaskCreate(trafficControlTask, "Traffic Control", 2048, NULL, 1, NULL);
}

