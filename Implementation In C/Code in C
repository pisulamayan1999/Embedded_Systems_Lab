#include <stdio.h>  // Include standard input-output header
#include <stdlib.h> // Include standard library header for functions like rand() and srand()
#include <time.h>   // Include time header for time() function

#define MAX_VEHICLES 10  // Maximum number of vehicles in a queue
#define NUM_DIRECTIONS 4 // Number of directions (N, S, E, W)

typedef struct {
    int id;         // Vehicle ID
    int speed;      // Speed of the vehicle (1-3 units/time unit)
    char direction; // Direction of the vehicle (N, S, E, W)
} Vehicle; // Define a structure for Vehicle

typedef struct {
    Vehicle vehicles[MAX_VEHICLES]; // Array to store vehicles
    int count;                      // Number of vehicles in the queue
} VehicleQueue; // Define a structure for VehicleQueue

VehicleQueue northQueue, southQueue, eastQueue, westQueue; // Define queues for each direction
char possibleDirections[] = {'N', 'S', 'E', 'W'}; // Array of possible directions

void initializeQueue(VehicleQueue *queue) {
    queue->count = 0; // Initialize the count of vehicles in the queue to 0
}

int isQueueFull(VehicleQueue *queue) {
    return queue->count >= MAX_VEHICLES; // Check if the queue is full
}

int isQueueEmpty(VehicleQueue *queue) {
    return queue->count == 0; // Check if the queue is empty
}

void addVehicleToQueue(VehicleQueue *queue, Vehicle vehicle) {
    if (!isQueueFull(queue)) { // Check if the queue is not full
        queue->vehicles[queue->count++] = vehicle; // Add vehicle to the queue and increment the count
    } else {
        printf("Queue is full, cannot add vehicle ID %d\n", vehicle.id); // Print message if queue is full
    }
}

Vehicle removeVehicleFromQueue(VehicleQueue *queue) {
    Vehicle emptyVehicle = {-1, 0, ' '}; // Define an empty vehicle to return if queue is empty
    if (!isQueueEmpty(queue)) { // Check if the queue is not empty
        Vehicle vehicle = queue->vehicles[0]; // Get the first vehicle in the queue
        for (int i = 0; i < queue->count - 1; i++) {
            queue->vehicles[i] = queue->vehicles[i + 1]; // Shift all vehicles to the left
        }
        queue->count--; // Decrement the count of vehicles
        return vehicle; // Return the removed vehicle
    } else {
        printf("Queue is empty, cannot remove vehicle\n"); // Print message if queue is empty
        return emptyVehicle; // Return empty vehicle
    }
}

void displayQueue(VehicleQueue *queue, char *name) {
    printf("%s Queue:\n", name); // Print the name of the queue
    for (int i = 0; i < queue->count; i++) { // Loop through each vehicle in the queue
        printf("  Vehicle ID: %d, Speed: %d, Direction: %c\n", queue->vehicles[i].id, queue->vehicles[i].speed, queue->vehicles[i].direction); // Print vehicle details
    }
}

void createVehicle(VehicleQueue *queue, int id) {
    if (isQueueFull(queue)) { // Check if the queue is full
        printf("Queue is full, cannot create vehicle ID %d\n", id); // Print message if queue is full
        return;
    }
    Vehicle newVehicle; // Define a new vehicle
    newVehicle.id = id; // Set the vehicle ID
    newVehicle.speed = rand() % 3 + 1; // Set a random speed between 1 and 3
    newVehicle.direction = possibleDirections[rand() % NUM_DIRECTIONS]; // Set a random direction
    
    addVehicleToQueue(queue, newVehicle); // Add the new vehicle to the queue
}

void simulateTraffic(int totalVehicles) {
    int vehicleCount = 0; // Initialize the vehicle count
    while (vehicleCount < totalVehicles) { // Loop until all vehicles are created
        if (vehicleCount < totalVehicles) {
            createVehicle(&northQueue, vehicleCount + 1); // Create a vehicle in the north queue
            vehicleCount++;
        }
        if (vehicleCount < totalVehicles) {
            createVehicle(&southQueue, vehicleCount + 1); // Create a vehicle in the south queue
            vehicleCount++;
        }
        if (vehicleCount < totalVehicles) {
            createVehicle(&eastQueue, vehicleCount + 1); // Create a vehicle in the east queue
            vehicleCount++;
        }
        if (vehicleCount < totalVehicles) {
            createVehicle(&westQueue, vehicleCount + 1); // Create a vehicle in the west queue
            vehicleCount++;
        }
    }
}

void initializeAllQueues() {
    initializeQueue(&northQueue); // Initialize the north queue
    initializeQueue(&southQueue); // Initialize the south queue
    initializeQueue(&eastQueue);  // Initialize the east queue
    initializeQueue(&westQueue);  // Initialize the west queue
}

void displayAllQueues() {
    displayQueue(&northQueue, "North"); // Display the north queue
    displayQueue(&southQueue, "South"); // Display the south queue
    displayQueue(&eastQueue, "East");   // Display the east queue
    displayQueue(&westQueue, "West");   // Display the west queue
}

void roundRobinTrafficControl() {
    while (1) { // Infinite loop for continuous traffic control
        if (!isQueueEmpty(&northQueue)) { // Check if the north queue is not empty
            Vehicle vehicle = removeVehicleFromQueue(&northQueue); // Remove vehicle from the north queue
            printf("Vehicle ID %d from North queue is crossing the intersection with speed %d\n", vehicle.id, vehicle.speed); // Print vehicle details
        }
        if (!isQueueEmpty(&southQueue)) { // Check if the south queue is not empty
            Vehicle vehicle = removeVehicleFromQueue(&southQueue); // Remove vehicle from the south queue
            printf("Vehicle ID %d from South queue is crossing the intersection with speed %d\n", vehicle.id, vehicle.speed); // Print vehicle details
        }
        if (!isQueueEmpty(&eastQueue)) { // Check if the east queue is not empty
            Vehicle vehicle = removeVehicleFromQueue(&eastQueue); // Remove vehicle from the east queue
            printf("Vehicle ID %d from East queue is crossing the intersection with speed %d\n", vehicle.id, vehicle.speed); // Print vehicle details
        }
        if (!isQueueEmpty(&westQueue)) { // Check if the west queue is not empty
            Vehicle vehicle = removeVehicleFromQueue(&westQueue); // Remove vehicle from the west queue
            printf("Vehicle ID %d from West queue is crossing the intersection with speed %d\n", vehicle.id, vehicle.speed); // Print vehicle details
        }
    }
}

int main() {
    srand(time(0)); // Seed for random number generation

    initializeAllQueues(); // Initialize all the queues
    simulateTraffic(20); // Simulate traffic with 20 vehicles

    displayAllQueues(); // Display the state of all queues for verification

    roundRobinTrafficControl(); // Start the round-robin traffic control
    return 0; // Return 0 to indicate successful execution
}

